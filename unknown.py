#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.6
#  in conjunction with Tcl version 8.6
#    Nov 29, 2020 02:02:53 PM IST  platform: Windows NT

import sys
import mysql.connector as a
import tkinter.messagebox

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import unknown_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = dbms (root)
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_dbms(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_dbms(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = dbms (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_dbms():
    global w
    w.destroy()
    w = None

class dbms:
     

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.''' 
        self.mydb=a.connect(host="localhost",user="root",password="Anshul@123",database="label")
        self.mycursor=self.mydb.cursor(dictionary=False)

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1500x800+10+10")
        top.minsize(148, 1)
        top.maxsize(1920, 1080)
        top.resizable(1,  1)
        top.title("DBMS")
        top.configure(background="#d9d9d9")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.048, rely=0.051, height=30, width=45)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 9")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Artist''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.048, rely=0.113, height=28, width=45)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Album''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.04, rely=0.175, height=28, width=65)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Producer''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.048, rely=0.236, height=28, width=45)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Year''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.048, rely=0.298, height=28, width=45)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(cursor="fleur")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''ID''')

        self.txtartist = tk.Text(top)
        self.txtartist.place(relx=0.104, rely=0.051, relheight=0.035
                , relwidth=0.163)
        self.txtartist.configure(background="white")
        self.txtartist.configure(cursor="fleur")
        self.txtartist.configure(font="TkTextFont")
        self.txtartist.configure(foreground="black")
        self.txtartist.configure(highlightbackground="#d9d9d9")
        self.txtartist.configure(highlightcolor="black")
        self.txtartist.configure(insertbackground="black")
        self.txtartist.configure(selectbackground="blue")
        self.txtartist.configure(selectforeground="white")
        self.txtartist.configure(wrap="word")

        self.txtalbum = tk.Text(top)
        self.txtalbum.place(relx=0.104, rely=0.113, relheight=0.035
                , relwidth=0.163)
        self.txtalbum.configure(background="white")
        self.txtalbum.configure(font="TkTextFont")
        self.txtalbum.configure(foreground="black")
        self.txtalbum.configure(highlightbackground="#d9d9d9")
        self.txtalbum.configure(highlightcolor="black")
        self.txtalbum.configure(insertbackground="black")
        self.txtalbum.configure(selectbackground="blue")
        self.txtalbum.configure(selectforeground="white")
        self.txtalbum.configure(wrap="word")

        self.txtpro = tk.Text(top)
        self.txtpro.place(relx=0.104, rely=0.175, relheight=0.035
                , relwidth=0.163)
        self.txtpro.configure(background="white")
        self.txtpro.configure(font="TkTextFont")
        self.txtpro.configure(foreground="black")
        self.txtpro.configure(highlightbackground="#d9d9d9")
        self.txtpro.configure(highlightcolor="black")
        self.txtpro.configure(insertbackground="black")
        self.txtpro.configure(selectbackground="blue")
        self.txtpro.configure(selectforeground="white")
        self.txtpro.configure(wrap="word")

        self.txtyear = tk.Text(top)
        self.txtyear.place(relx=0.104, rely=0.236, relheight=0.033
                , relwidth=0.163)
        self.txtyear.configure(background="white")
        self.txtyear.configure(font="TkTextFont")
        self.txtyear.configure(foreground="black")
        self.txtyear.configure(highlightbackground="#d9d9d9")
        self.txtyear.configure(highlightcolor="black")
        self.txtyear.configure(insertbackground="black")
        self.txtyear.configure(selectbackground="blue")
        self.txtyear.configure(selectforeground="white")
        self.txtyear.configure(wrap="word")

        self.txtid = tk.Text(top)
        self.txtid.place(relx=0.104, rely=0.298, relheight=0.034, relwidth=0.163)

        self.txtid.configure(background="white")
        self.txtid.configure(font="TkTextFont")
        self.txtid.configure(foreground="black")
        self.txtid.configure(highlightbackground="#d9d9d9")
        self.txtid.configure(highlightcolor="black")
        self.txtid.configure(insertbackground="black")
        self.txtid.configure(selectbackground="blue")
        self.txtid.configure(selectforeground="white")
        self.txtid.configure(wrap="word")

        self.listbox1 = tk.Listbox(top)
        self.listbox1.place(relx=0.346, rely=0.039, relheight=0.296
                , relwidth=0.353)
        self.listbox1.configure(background="white")
        self.listbox1.configure(disabledforeground="#a3a3a3")
        self.listbox1.configure(font="TkFixedFont")
        self.listbox1.configure(foreground="#000000")

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.736, rely=0.051, height=27, width=44)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''Song''')

        self.txtsong = tk.Text(top)
        self.txtsong.place(relx=0.784, rely=0.051, relheight=0.037, relwidth=0.163)

        self.txtsong.configure(background="white")
        self.txtsong.configure(font="TkTextFont")
        self.txtsong.configure(foreground="black")
        self.txtsong.configure(highlightbackground="#d9d9d9")
        self.txtsong.configure(highlightcolor="black")
        self.txtsong.configure(insertbackground="black")
        self.txtsong.configure(selectbackground="blue")
        self.txtsong.configure(selectforeground="white")
        self.txtsong.configure(wrap="word")

        self.btnadd = tk.Button(top)
        self.btnadd.place(relx=0.04, rely=0.38, height=33, width=56)
        self.btnadd.configure(activebackground="#ececec")
        self.btnadd.configure(activeforeground="#000000")
        self.btnadd.configure(background="#d9d9d9")
        self.btnadd.configure(disabledforeground="#a3a3a3")
        self.btnadd.configure(foreground="#000000")
        self.btnadd.configure(highlightbackground="#d9d9d9")
        self.btnadd.configure(highlightcolor="black")
        self.btnadd.configure(pady="0")
        self.btnadd.configure(command=lambda:adddetails(self),text='''Add''')

        self.btnadd1 = tk.Button(top)
        self.btnadd1.place(relx=0.14, rely=0.935, height=38, width=70)
        self.btnadd1.configure(activebackground="#ececec")
        self.btnadd1.configure(activeforeground="#000000")
        self.btnadd1.configure(background="#d9d9d9")
        self.btnadd1.configure(disabledforeground="#a3a3a3")
        self.btnadd1.configure(foreground="#000000")
        self.btnadd1.configure(highlightbackground="#d9d9d9")
        self.btnadd1.configure(highlightcolor="black")
        self.btnadd1.configure(pady="0")
        self.btnadd1.configure(command=lambda:detailsadd(self),text='''Add''')

        self.btnupdate = tk.Button(top)
        self.btnupdate.place(relx=0.12, rely=0.38, height=33, width=56)
        self.btnupdate.configure(activebackground="#ececec")
        self.btnupdate.configure(activeforeground="#000000")
        self.btnupdate.configure(background="#d9d9d9")
        self.btnupdate.configure(disabledforeground="#a3a3a3")
        self.btnupdate.configure(foreground="#000000")
        self.btnupdate.configure(highlightbackground="#d9d9d9")
        self.btnupdate.configure(highlightcolor="black")
        self.btnupdate.configure(pady="0")
        self.btnupdate.configure(command=lambda:updatedetails(self) ,text='''Update''')

        self.btndelete = tk.Button(top)
        self.btndelete.place(relx=0.216, rely=0.38, height=33, width=56)
        self.btndelete.configure(activebackground="#ececec")
        self.btndelete.configure(activeforeground="#000000")
        self.btndelete.configure(background="#d9d9d9")
        self.btndelete.configure(disabledforeground="#a3a3a3")
        self.btndelete.configure(foreground="#000000")
        self.btndelete.configure(highlightbackground="#d9d9d9")
        self.btndelete.configure(highlightcolor="black")
        self.btndelete.configure(pady="0")
        self.btndelete.configure(command=lambda:deletedetails(self),text='''Delete''')

        self.btndelete1 = tk.Button(top)
        self.btndelete1.place(relx=0.25, rely=0.935, height=38, width=70)
        self.btndelete1.configure(activebackground="#ececec")
        self.btndelete1.configure(activeforeground="#000000")
        self.btndelete1.configure(background="#d9d9d9")
        self.btndelete1.configure(disabledforeground="#a3a3a3")
        self.btndelete1.configure(foreground="#000000")
        self.btndelete1.configure(highlightbackground="#d9d9d9")
        self.btndelete1.configure(highlightcolor="black")
        self.btndelete1.configure(pady="0")
        self.btndelete1.configure(command=lambda:delete_sec_details(self),text='''Delete''')

        self.btnshow = tk.Button(top)
        self.btnshow.place(relx=0.312, rely=0.38, height=33, width=56)
        self.btnshow.configure(activebackground="#ececec")
        self.btnshow.configure(activeforeground="#000000")
        self.btnshow.configure(background="#d9d9d9")
        self.btnshow.configure(disabledforeground="#a3a3a3")
        self.btnshow.configure(foreground="#000000")
        self.btnshow.configure(highlightbackground="#d9d9d9")
        self.btnshow.configure(highlightcolor="black")
        self.btnshow.configure(pady="0")
        self.btnshow.configure(command=lambda:showdetails(self),text='''Show''')

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.04, rely=0.441, height=71, width=231)
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(font="-family {Impact} -size 23")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(text='''Album Details''')

        self.Label8 = tk.Label(top)
        self.Label8.place(relx=0.048, rely=0.513, height=30, width=55)
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(text='''Album''')

        self.txtalb1 = tk.Text(top)
        self.txtalb1.place(relx=0.048, rely=0.544, relheight=0.034
                , relwidth=0.171)
        self.txtalb1.configure(background="white")
        self.txtalb1.configure(font="TkTextFont")
        self.txtalb1.configure(foreground="black")
        self.txtalb1.configure(highlightbackground="#d9d9d9")
        self.txtalb1.configure(highlightcolor="black")
        self.txtalb1.configure(insertbackground="black")
        self.txtalb1.configure(selectbackground="blue")
        self.txtalb1.configure(selectforeground="white")
        self.txtalb1.configure(wrap="word")

        self.Label9 = tk.Label(top)
        self.Label9.place(relx=0.256, rely=0.513, height=28, width=116)
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(text='''No. of Tracks''')

        self.txtalb2 = tk.Text(top)
        self.txtalb2.place(relx=0.264, rely=0.544, relheight=0.034
                , relwidth=0.171)
        self.txtalb2.configure(background="white")
        self.txtalb2.configure(font="TkTextFont")
        self.txtalb2.configure(foreground="black")
        self.txtalb2.configure(highlightbackground="#d9d9d9")
        self.txtalb2.configure(highlightcolor="black")
        self.txtalb2.configure(insertbackground="black")
        self.txtalb2.configure(selectbackground="blue")
        self.txtalb2.configure(selectforeground="white")
        self.txtalb2.configure(wrap="word")

        self.Label10 = tk.Label(top)
        self.Label10.place(relx=0.031, rely=0.599, height=69, width=283)
        self.Label10.configure(background="#d9d9d9")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(font="-family {Impact} -size 23")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(text='''Producer Details''')

        self.Label11 = tk.Label(top)
        self.Label11.place(relx=0.046, rely=0.668, height=28, width=65)
        self.Label11.configure(background="#d9d9d9")
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(foreground="#000000")
        self.Label11.configure(text='''Producer''')

        self.Label12 = tk.Label(top)
        self.Label12.place(relx=0.262, rely=0.668, height=28, width=55)
        self.Label12.configure(background="#d9d9d9")
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(foreground="#000000")
        self.Label12.configure(text='''Contact''')

        self.txtpro1 = tk.Text(top)
        self.txtpro1.place(relx=0.046, rely=0.697, relheight=0.033
                , relwidth=0.171)
        self.txtpro1.configure(background="white")
        self.txtpro1.configure(font="TkTextFont")
        self.txtpro1.configure(foreground="black")
        self.txtpro1.configure(highlightbackground="#d9d9d9")
        self.txtpro1.configure(highlightcolor="black")
        self.txtpro1.configure(insertbackground="black")
        self.txtpro1.configure(selectbackground="blue")
        self.txtpro1.configure(selectforeground="white")
        self.txtpro1.configure(wrap="word")

        self.txtpro2 = tk.Text(top)
        self.txtpro2.place(relx=0.262, rely=0.697, relheight=0.035, relwidth=0.179)

        self.txtpro2.configure(background="white")
        self.txtpro2.configure(font="TkTextFont")
        self.txtpro2.configure(foreground="black")
        self.txtpro2.configure(highlightbackground="#d9d9d9")
        self.txtpro2.configure(highlightcolor="black")
        self.txtpro2.configure(insertbackground="black")
        self.txtpro2.configure(selectbackground="blue")
        self.txtpro2.configure(selectforeground="white")
        self.txtpro2.configure(wrap="word")

        self.Label13 = tk.Label(top)
        self.Label13.place(relx=0.038, rely=0.766, height=56, width=222)
        self.Label13.configure(background="#d9d9d9")
        self.Label13.configure(cursor="fleur")
        self.Label13.configure(disabledforeground="#a3a3a3")
        self.Label13.configure(font="-family {Impact} -size 23")
        self.Label13.configure(foreground="#000000")
        self.Label13.configure(text='''Artist Details''')

        self.Label14 = tk.Label(top)
        self.Label14.place(relx=0.046, rely=0.835, height=28, width=41)
        self.Label14.configure(background="#d9d9d9")
        self.Label14.configure(disabledforeground="#a3a3a3")
        self.Label14.configure(foreground="#000000")
        self.Label14.configure(text='''Artist''')

        self.Label15 = tk.Label(top)
        self.Label15.place(relx=0.254, rely=0.835, height=26, width=62)
        self.Label15.configure(background="#d9d9d9")
        self.Label15.configure(disabledforeground="#a3a3a3")
        self.Label15.configure(foreground="#000000")
        self.Label15.configure(text='''Contact''')

        self.txtartist1 = tk.Text(top)
        self.txtartist1.place(relx=0.046, rely=0.864, relheight=0.038
                , relwidth=0.172)
        self.txtartist1.configure(background="white")
        self.txtartist1.configure(font="TkTextFont")
        self.txtartist1.configure(foreground="black")
        self.txtartist1.configure(highlightbackground="#d9d9d9")
        self.txtartist1.configure(highlightcolor="black")
        self.txtartist1.configure(insertbackground="black")
        self.txtartist1.configure(selectbackground="blue")
        self.txtartist1.configure(selectforeground="white")
        self.txtartist1.configure(wrap="word")

        self.txtartist2 = tk.Text(top)
        self.txtartist2.place(relx=0.254, rely=0.864, relheight=0.035
                , relwidth=0.189)
        self.txtartist2.configure(background="white")
        self.txtartist2.configure(font="TkTextFont")
        self.txtartist2.configure(foreground="black")
        self.txtartist2.configure(highlightbackground="#d9d9d9")
        self.txtartist2.configure(highlightcolor="black")
        self.txtartist2.configure(insertbackground="black")
        self.txtartist2.configure(selectbackground="blue")
        self.txtartist2.configure(selectforeground="white")
        self.txtartist2.configure(wrap="word")

        self.Listbox2 = tk.Listbox(top)
        self.Listbox2.place(relx=0.593, rely=0.432, relheight=0.391
                , relwidth=0.357)
        self.Listbox2.configure(background="white")
        self.Listbox2.configure(disabledforeground="#a3a3a3")
        self.Listbox2.configure(font="TkFixedFont")
        self.Listbox2.configure(foreground="#000000")

        self.btnalbum = tk.Button(top)
        self.btnalbum.place(relx=0.57, rely=0.864, height=43, width=106)
        self.btnalbum.configure(activebackground="#ececec")
        self.btnalbum.configure(activeforeground="#000000")
        self.btnalbum.configure(background="#d9d9d9")
        self.btnalbum.configure(disabledforeground="#a3a3a3")
        self.btnalbum.configure(foreground="#000000")
        self.btnalbum.configure(highlightbackground="#d9d9d9")
        self.btnalbum.configure(highlightcolor="black")
        self.btnalbum.configure(pady="0")
        self.btnalbum.configure(command=lambda:albumdetails(self),text='''Album Details''')

        self.btnpro = tk.Button(top)
        self.btnpro.place(relx=0.731, rely=0.864, height=43, width=116)
        self.btnpro.configure(activebackground="#ececec")
        self.btnpro.configure(activeforeground="#000000")
        self.btnpro.configure(background="#d9d9d9")
        self.btnpro.configure(disabledforeground="#a3a3a3")
        self.btnpro.configure(foreground="#000000")
        self.btnpro.configure(highlightbackground="#d9d9d9")
        self.btnpro.configure(highlightcolor="black")
        self.btnpro.configure(pady="0")
        self.btnpro.configure(command=lambda:prodetails(self),text='''Producer Details''')

        self.btnartist = tk.Button(top)
        self.btnartist.place(relx=0.893, rely=0.864, height=43, width=106)
        self.btnartist.configure(activebackground="#ececec")
        self.btnartist.configure(activeforeground="#000000")
        self.btnartist.configure(background="#d9d9d9")
        self.btnartist.configure(disabledforeground="#a3a3a3")
        self.btnartist.configure(foreground="#000000")
        self.btnartist.configure(highlightbackground="#d9d9d9")
        self.btnartist.configure(highlightcolor="black")
        self.btnartist.configure(pady="0")
        self.btnartist.configure(command=lambda:artistdetails(self),text='''Artist Details''')



def showdetails(self):
        tkinter.messagebox.showinfo("Fetching Details","Fetching Details From Database")

        try:
                self.mycursor.execute("select * from record")
                dbresponse=self.mycursor.fetchall()
                self.listbox1.delete('0','end')
                j=0
                for i in dbresponse:
                        self.listbox1.insert(j,i)
                        j=j+1
        except Exception:
                tkinter.messagebox.showerror("Error","Error in Fetching Details From Database")
        self.txtartist.delete("1.0", "end-1c")
        self.txtalbum.delete("1.0", "end-1c")
        self.txtpro.delete("1.0", "end-1c")
        self.txtyear.delete("1.0", "end-1c")
        self.txtsong.delete("1.0", "end-1c")
        self.txtid.delete("1.0", "end-1c")

def adddetails(self):
        self.listbox1.delete('0','end')
        artist=self.txtartist.get('1.0','end-1c')
        album=self.txtalbum.get('1.0','end-1c')
        producer=self.txtpro.get('1.0','end-1c')
        year=self.txtyear.get('1.0','end-1c')
        id1=self.txtid.get('1.0','end-1c')
        song=self.txtsong.get('1.0','end-1c')
        if(len(song)==0):
                try:
                        insQuery=("insert into record""(artist, album, producer, year, id)"
                                "VALUES (%(artist)s, %(album)s, %(producer)s, %(year)s,%(id)s)")
                        Querydata={
                                'artist':artist,
                                'album':album,
                                'producer':producer,
                                'year':year,
                                'id':id1,
                        }
                        self.mycursor.execute(insQuery,Querydata)
                except Exception:
                        tkinter.messagebox.showerror("Error","Error in Adding Details to the Database")
                self.mydb.commit()
        elif(len(album)==0):
                try:
                        insQuery=("insert into record""(artist, album, producer, year, id)"
                                "VALUES (%(artist)s, %(album)s, %(producer)s, %(year)s,%(id)s)")
                        Querydata={
                                'artist':artist,
                                'album':song,
                                'producer':producer,
                                'year':year,
                                'id':id1,
                        }
                        self.mycursor.execute(insQuery,Querydata)
                except Exception:
                        tkinter.messagebox.showerror("Error","Error in Adding Details to the Database")
                self.mydb.commit()
        elif(len(song)!=0 and len(album)!=0 ):
                try:
                        insQuery=("insert into record""(artist, album, producer, year, id)"
                                "VALUES (%(artist)s, %(album)s, %(producer)s, %(year)s,%(id)s)")
                        Querydata={
                                'artist':artist,
                                'album':album,
                                'producer':producer,
                                'year':year,
                                'id':id1,
                        }
                        self.mycursor.execute(insQuery,Querydata)
                except Exception:
                        tkinter.messagebox.showerror("Error","Error in Adding Details to the Database")
                self.mydb.commit()
                try:
                        insQuery=("insert into record""(artist, album, producer, year, id)"
                                "VALUES (%(artist)s, %(album)s, %(producer)s, %(year)s,%(id)s)")
                        Querydata={
                                'artist':artist,
                                'album':song,
                                'producer':producer,
                                'year':year,
                                'id':id1,
                        }
                        self.mycursor.execute(insQuery,Querydata)
                except Exception:
                        tkinter.messagebox.showerror("Error","Error in Adding Details to the Database")
                self.mydb.commit()
        tkinter.messagebox.showinfo("Adding","Data Successfully added to Database")
        self.txtartist.delete("1.0", "end-1c")
        self.txtalbum.delete("1.0", "end-1c")
        self.txtpro.delete("1.0", "end-1c")
        self.txtyear.delete("1.0", "end-1c")
        self.txtsong.delete("1.0", "end-1c")
        self.txtid.delete("1.0", "end-1c")


def deletedetails(self):
        self.listbox1.delete('0','end')
        unid=self.txtid.get('1.0','end-1c')
        response1=self.mycursor.execute("delete from record where id="+unid)
        self.mydb.commit()
        self.txtid.delete("1.0", "end-1c")
        tkinter.messagebox.showinfo("Deleting","Data Successfully Deleted from the Database")

def updatedetails(self):
        self.listbox1.delete('0','end')
        artist=self.txtartist.get('1.0','end-1c')
        album=self.txtalbum.get('1.0','end-1c')
        producer=self.txtpro.get('1.0','end-1c')
        year=self.txtyear.get('1.0','end-1c')
        id1=self.txtid.get('1.0','end-1c')
        song=self.txtsong.get('1.0','end-1c')
        if(len(artist)!=0):
                sql="update record SET artist=%s where id=%s"
                value=(artist,id1)
                response2=self.mycursor.execute(sql,value)
                self.mydb.commit()
        if(len(album)!=0):
                sql="update record SET album=%s where id=%s"
                value=(album,id1)
                response2=self.mycursor.execute(sql,value)
                self.mydb.commit()
        if(len(producer)!=0):
                sql="update record SET producer=%s where id=%s"
                value=(producer,id1)
                response2=self.mycursor.execute(sql,value)
                self.mydb.commit()
        if(len(year)!=0):
                sql="update record SET year=%s where id=%s"
                value=(year,id1)
                response2=self.mycursor.execute(sql,value)
                self.mydb.commit()
        if(len(song)!=0):
                sql="update record SET album=%s where id=%s"
                value=(song,id1)
                response2=self.mycursor.execute(sql,value)
                self.mydb.commit()
        tkinter.messagebox.showinfo("Updating","Data Successfully Updated in the Database")
        self.txtartist.delete("1.0", "end-1c")
        self.txtalbum.delete("1.0", "end-1c")
        self.txtpro.delete("1.0", "end-1c")
        self.txtyear.delete("1.0", "end-1c")
        self.txtsong.delete("1.0", "end-1c")
        self.txtid.delete("1.0", "end-1c")


        
def detailsadd(self):
        self.Listbox2.delete('0','end')
        alb1=self.txtalb1.get('1.0','end-1c')
        alb2=self.txtalb2.get('1.0','end-1c')
        pro1=self.txtpro1.get('1.0','end-1c')
        pro2=self.txtpro2.get('1.0','end-1c')
        artist1=self.txtartist1.get('1.0','end-1c')
        artist2=self.txtartist2.get('1.0','end-1c')
        if(len(alb1)!=0 and len(alb2)!=0):
                try:
                        secQuery=("insert into albumd""(album,tracks)"
                                "VALUES (%(album)s, %(tracks)s)")
                        secQuerydata={
                                'album':alb1,
                                'tracks':alb2,
                        }
                        self.mycursor.execute(secQuery,secQuerydata)
                except Exception:
                        tkinter.messagebox.showerror("Error","Error in Adding Details to the Database")
                self.mydb.commit()
        if(len(pro1)!=0 and len(pro2)!=0):
                try:
                        secQuery=("insert into producerd""(producer,contact)"
                                "VALUES (%(producer)s, %(contact)s)")
                        secQuerydata={
                                'producer':pro1,
                                'contact':pro2,
                        }
                        self.mycursor.execute(secQuery,secQuerydata)
                except Exception:
                        tkinter.messagebox.showerror("Error","Error in Adding Details to the Database")
                self.mydb.commit()
        if(len(artist1)!=0 and len(artist2)!=0):
                try:
                        secQuery=("insert into artistd""(artist,phno)"
                                "VALUES (%(artist)s, %(phno)s)")
                        secQuerydata={
                                'artist':artist1,
                                'phno':artist2,
                        }
                        self.mycursor.execute(secQuery,secQuerydata)
                except Exception:
                        tkinter.messagebox.showerror("Error","Error in Adding Details to the Database")
                self.mydb.commit()
        tkinter.messagebox.showinfo("Adding","Data Successfully added to Database")
        self.txtalb1.delete("1.0", "end-1c")
        self.txtalb2.delete("1.0", "end-1c")
        self.txtpro1.delete("1.0", "end-1c")
        self.txtpro2.delete("1.0", "end-1c")
        self.txtartist1.delete("1.0", "end-1c")
        self.txtartist2.delete("1.0", "end-1c")

def albumdetails(self):
        tkinter.messagebox.showinfo("Fetching Details","Fetching Details From Database")
        try:
                self.mycursor.execute("select * from albumd")
                response=self.mycursor.fetchall()
                self.Listbox2.delete('0','end')
                x=0
                for y in response:
                        self.Listbox2.insert(x,y)
                        x=x+1
        except Exception:
                tkinter.messagebox.showerror("Error","Error in Fetching Details From Database")
        self.txtalb1.delete("1.0", "end-1c")
        self.txtalb2.delete("1.0", "end-1c")
        self.txtpro1.delete("1.0", "end-1c")
        self.txtpro2.delete("1.0", "end-1c")
        self.txtartist1.delete("1.0", "end-1c")
        self.txtartist2.delete("1.0", "end-1c")
def prodetails(self):
        tkinter.messagebox.showinfo("Fetching Details","Fetching Details From Database")
        try:
                self.mycursor.execute("select * from producerd")
                dbresponse1=self.mycursor.fetchall()
                self.Listbox2.delete('0','end')
                u=0
                for v in dbresponse1:
                        self.Listbox2.insert(u,v)
                        u=u+1
        except Exception:
                tkinter.messagebox.showerror("Error","Error in Fetching Details From Database")
        self.txtalb1.delete("1.0", "end-1c")
        self.txtalb2.delete("1.0", "end-1c")
        self.txtpro1.delete("1.0", "end-1c")
        self.txtpro2.delete("1.0", "end-1c")
        self.txtartist1.delete("1.0", "end-1c")
        self.txtartist2.delete("1.0", "end-1c")

def artistdetails(self):
        tkinter.messagebox.showinfo("Fetching Details","Fetching Details From Database")
        try:
                self.mycursor.execute("select * from artistd")
                dbresponse2=self.mycursor.fetchall()
                self.Listbox2.delete('0','end')
                p=0
                for q in dbresponse2:
                        self.Listbox2.insert(p,q)
                        p=p+1
        except Exception:
                tkinter.messagebox.showerror("Error","Error in Fetching Details From Database")
        self.txtalb1.delete("1.0", "end-1c")
        self.txtalb2.delete("1.0", "end-1c")
        self.txtpro1.delete("1.0", "end-1c")
        self.txtpro2.delete("1.0", "end-1c")
        self.txtartist1.delete("1.0", "end-1c")
        self.txtartist2.delete("1.0", "end-1c")
        
def delete_sec_details(self):
        self.Listbox2.delete('0','end')
        alb1=self.txtalb1.get('1.0','end-1c')
        alb2=self.txtalb2.get('1.0','end-1c')
        pro1=self.txtpro1.get('1.0','end-1c')
        pro2=self.txtpro2.get('1.0','end-1c')
        artist1=self.txtartist1.get('1.0','end-1c')
        artist2=self.txtartist2.get('1.0','end-1c')
        if(len(alb1)!=0 or len(alb2)!=0):
                if(len(alb1)!=0):
                        resp=self.mycursor.execute("delete from albumd where album='"+alb1+"'")
                        self.mydb.commit()
                elif(len(alb2)!=0):
                        resp=self.mycursor.execute("delete from albumd where tracks='"+alb2+"'")
                        self.mydb.commit()
        if(len(pro1)!=0 or len(pro2)!=0):
                if(len(pro1)!=0):
                        resp1=self.mycursor.execute("delete from producerd where producer='"+pro1+"'")
                        self.mydb.commit()
                elif(len(pro2)!=0):
                        resp1=self.mycursor.execute("delete from producerd where contact='"+pro2+"'")
                        self.mydb.commit()
        if(len(artist1)!=0 or len(artist2)!=0):
                if(len(artist1)!=0):
                        resp2=self.mycursor.execute("delete from artistd where artist='"+artist1+"'")
                        self.mydb.commit()
                elif(len(artist2)!=0):
                        resp2=self.mycursor.execute("delete from artistd where phno='"+artist2+"'")
                        self.mydb.commit()
        
        tkinter.messagebox.showinfo("Deleting","Data Successfully Deleted from the Database")
        self.txtalb1.delete("1.0", "end-1c")
        self.txtalb2.delete("1.0", "end-1c")
        self.txtpro1.delete("1.0", "end-1c")
        self.txtpro2.delete("1.0", "end-1c")
        self.txtartist1.delete("1.0", "end-1c")
        self.txtartist2.delete("1.0", "end-1c")



if __name__ == '__main__':
    vp_start_gui()





